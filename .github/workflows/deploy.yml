name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ closed ]
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Only run on merged PRs or direct pushes to main
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          timeout: 60m # Increase timeout to 60 minutes
          script: |
            echo "===== Starting zero-downtime deployment ====="
            
            # Set up directories
            MAIN_DIR="/home/e-do.studio-2.0"
            BUILD_DIR="/home/e-do.studio-2.0-build"
            BACKUP_DIR="/home/e-do.studio-2.0-backup"
            
            # Setup build directory
            if [ ! -d "$BUILD_DIR" ]; then
              echo "Creating build directory"
              mkdir -p "$BUILD_DIR"
            else
              echo "Cleaning build directory"
              rm -rf "$BUILD_DIR"
              mkdir -p "$BUILD_DIR"
            fi
            
            # Clone or update repository in build directory
            if [ -d "$MAIN_DIR/.git" ]; then
              echo "Copying existing repository to build directory"
              cp -a "$MAIN_DIR/.git" "$BUILD_DIR/"
              cd "$BUILD_DIR"
              git reset --hard HEAD
              git clean -fd
              git pull origin main
            else
              echo "Cloning fresh repository to build directory"
              cd "$BUILD_DIR"
              git init
              git remote add origin https://github.com/E-Do-Studio/e-do.studio-2.0.git
              git fetch origin main
              git checkout -b main origin/main
            fi
            
            # Check Node.js version and update if needed
            echo "Checking Node.js version..."
            NODE_VERSION=$(node -v)
            echo "Current Node.js version: $NODE_VERSION"
            
            # Extract version number without 'v' prefix and split by dots
            VERSION_NUMBER=${NODE_VERSION#v}
            MAJOR_VERSION=$(echo $VERSION_NUMBER | cut -d. -f1)
            
            # Next.js 15+ requires Node.js 18.17.0 or higher
            if [ "$MAJOR_VERSION" -lt 18 ]; then
              echo "Node.js version is below 18, updating to Node.js 18 LTS..."
              
              # Install NVM if not already installed
              if [ ! -d "$HOME/.nvm" ]; then
                echo "Installing NVM..."
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              fi
              
              # Load NVM
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              
              # Install and use Node.js 18 LTS
              nvm install 18
              nvm use 18
              
              echo "Node.js updated to: $(node -v)"
            fi
            
            # Create .env.local file with environment variables
            echo "Creating .env.local file with environment variables"
            cat > "$BUILD_DIR/.env.local" << EOL
            # API Keys
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            
            # Add any other environment variables your app needs
            NEXT_PUBLIC_SITE_URL=https://e-do.studio
            NODE_ENV=production
            EOL
            
            # Clean npm cache to avoid potential issues
            echo "Cleaning npm cache..."
            npm cache clean --force
            
            # Remove node_modules to ensure clean install
            echo "Removing old node_modules directory..."
            rm -rf "$BUILD_DIR/node_modules"
            rm -rf "$BUILD_DIR/.next"
            
            # Check if next.config.js needs to be modified to disable font optimization
            echo "Checking if font optimization needs to be disabled..."
            if grep -q "nextFontGoogle" "$BUILD_DIR/next.config.js"; then
              echo "Disabling font optimization in next.config.js..."
              
              # Create backup of original config
              cp "$BUILD_DIR/next.config.js" "$BUILD_DIR/next.config.js.bak"
              
              # Modify next.config.js to disable font optimization
              sed -i 's/nextFontGoogle: {}/nextFontGoogle: false/' "$BUILD_DIR/next.config.js"
              # Alternative approach if the above doesn't work
              sed -i 's/experimental: {/experimental: {\n    nextFontGoogle: false,/' "$BUILD_DIR/next.config.js"
            fi
            
            # Install dependencies in build directory
            echo "Installing dependencies with npm..."
            cd "$BUILD_DIR"
            npm install --no-fund --no-audit --prefer-offline --production=false
            
            # Create an empty font manifest file to prevent the build error
            echo "Creating empty font manifest file to prevent build errors..."
            mkdir -p "$BUILD_DIR/.next/server"
            echo '{}' > "$BUILD_DIR/.next/server/next-font-manifest.json"
            
            # Build with optimized settings
            echo "Building application with production settings..."
            cd "$BUILD_DIR"
            export NODE_ENV=production
            export NEXT_TELEMETRY_DISABLED=1
            NODE_OPTIONS="--max-old-space-size=4096 --no-deprecation" npm run build
            
            # Check build status
            BUILD_STATUS=$?
            if [ $BUILD_STATUS -ne 0 ]; then
              echo "Build failed with status: $BUILD_STATUS"
              exit 1
            fi
            
            # Verify .next directory exists
            if [ ! -d "$BUILD_DIR/.next" ]; then
              echo "Build failed: .next directory not found"
              exit 1
            fi
            
            echo "Build successful, swapping directories..."
            
            # Backup current production directory if it exists
            if [ -d "$MAIN_DIR" ]; then
              echo "Backing up current production directory"
              if [ -d "$BACKUP_DIR" ]; then
                rm -rf "$BACKUP_DIR"
              fi
              mv "$MAIN_DIR" "$BACKUP_DIR"
            fi
            
            # Move build directory to production
            echo "Moving build to production"
            mv "$BUILD_DIR" "$MAIN_DIR"
            
            # Restart or start with PM2
            echo "Updating PM2 service"
            cd "$MAIN_DIR"
            
            # Start in production mode
            export NODE_ENV=production
            
            if pm2 list | grep -q "e-do-studio"; then
              echo "Restarting existing PM2 process..."
              pm2 restart e-do-studio --update-env
            else
              echo "Starting new PM2 process..."
              pm2 start npm --name "e-do-studio" -- start
            fi
            
            # Health check (wait for service to start)
            echo "Performing health check..."
            sleep 10
            
            # Try to restore from backup if PM2 process fails after restart
            if ! pm2 list | grep -q "e-do-studio.*online"; then
              echo "Health check failed, reverting to previous version..."
              pm2 stop e-do-studio
              
              # Restore from backup
              rm -rf "$MAIN_DIR"
              mv "$BACKUP_DIR" "$MAIN_DIR"
              cd "$MAIN_DIR"
              
              # Restart from backup
              pm2 restart e-do-studio
              echo "Reverted to previous version"
              exit 1
            fi
            
            echo "Deployment complete!"
